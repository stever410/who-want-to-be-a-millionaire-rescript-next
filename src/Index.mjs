// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Axios from "axios";
import * as React from "react";
import * as $$Promise from "reason-promise/src/js/promise.mjs";
import * as AppConfig from "./config/AppConfig.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";

var $$Window = {};

var initialProps_questions = [];

var initialProps = {
  questions: initialProps_questions,
  currentQuestionIndex: 0
};

function getServerSideProps(_ctx) {
  return $$Promise.Js.map(Axios.get("/api.php?amount=" + String(AppConfig.questionAmount) + "&type=" + AppConfig.questionType, AppConfig.axiosConfig), (function (param) {
                return {
                        props: {
                          questions: param.data.results,
                          currentQuestionIndex: 0
                        }
                      };
              }));
}

function randomizeAnswers(question) {
  return Belt_Array.shuffle(Belt_Array.concat([question.correct_answer], question.incorrect_answers));
}

function $$default(param) {
  var currentQuestionIndex = param.currentQuestionIndex;
  var questions = param.questions;
  var match = React.useState(function () {
        return "";
      });
  var setSelectedAnswer = match[1];
  var selectedAnswer = match[0];
  var match$1 = React.useState(function () {
        return 0;
      });
  var setScore = match$1[1];
  var match$2 = React.useState(function () {
        return randomizeAnswers(Caml_array.get(questions, currentQuestionIndex));
      });
  return React.createElement("div", undefined, React.createElement("h1", {
                  className: "text-3xl font-semibold mb-4"
                }, "Your score: " + String(match$1[0])), React.createElement("hr", undefined), React.createElement("h1", {
                  className: "text-3xl font-semibold",
                  dangerouslySetInnerHTML: {
                    __html: Caml_array.get(questions, currentQuestionIndex).question
                  }
                }), React.createElement("form", {
                  onSubmit: (function ($$event) {
                      var question = Caml_array.get(questions, currentQuestionIndex);
                      $$event.preventDefault();
                      var selectedAnswer = $$event.target.answer.value;
                      if (selectedAnswer === question.correct_answer) {
                        window.alert("Correct answer");
                        Curry._1(setScore, (function (v) {
                                return v + 1 | 0;
                              }));
                      } else {
                        window.alert("The correct answer is " + question.correct_answer);
                      }
                      return Curry._1(setSelectedAnswer, (function (param) {
                                    return "";
                                  }));
                    })
                }, React.createElement("ol", {
                      type: "a"
                    }, Belt_Array.mapWithIndex(match$2[0], (function (index, answer) {
                            return React.createElement("li", {
                                        key: answer,
                                        className: "my-2"
                                      }, React.createElement("input", {
                                            className: "mr-2",
                                            id: "answer" + String(index),
                                            name: "answer",
                                            type: "radio",
                                            value: answer,
                                            onChange: (function (e) {
                                                return Curry._1(setSelectedAnswer, e.target.value);
                                              })
                                          }), React.createElement("label", {
                                            htmlFor: "answer" + String(index),
                                            dangerouslySetInnerHTML: {
                                              __html: answer
                                            }
                                          }));
                          }))), React.createElement("button", {
                      className: "mt-4 btn btn-blue " + (
                        selectedAnswer.length === 0 ? "btn-disabled" : ""
                      ),
                      disabled: selectedAnswer.length === 0,
                      type: "submit"
                    }, "Submit answer")));
}

export {
  $$Window ,
  initialProps ,
  getServerSideProps ,
  randomizeAnswers ,
  $$default ,
  $$default as default,
  
}
/* axios Not a pure module */
